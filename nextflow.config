
// Load configs by default for all pipelines
includeConfig 'conf/profiles.config'
includeConfig 'conf/resources.config'
includeConfig 'conf/environments.config'

// Overwrite schema
dag.overwrite = true

// Overall params (temporary)
params {
    config_profile_name = 'Global'
    config_profile_description = 'Using global options for standard run'
    show_hidden_params = false
    monochrome_logs = false
    help = false
    version = false
    validate_params = true
    schema_ignore_params = 'genomes'
    max_memory = '16.GB'
    max_time = '240.h'
    max_cpus = 48
}

// Manifest
manifest {
    name            = 'ajandria/futuriandge'
    author          = """Adrian Janucik"""
    homePage        = 'https://github.com/ajandria/futuriandge'
    description     = """RNA-seq pipeline for differential gene expression analysis (specfic to MUB infrastructure)"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=22.10.7'
    version = '1.2'
    doi             = ''
}

// Pipeline indermediate files
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outDir}/INERMEDIATE-FILES_FUTURIANDGE-NF/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outDir}/INERMEDIATE-FILES_FUTURIANDGE-NF/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outDir}/INERMEDIATE-FILES_FUTURIANDGE-NF/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outDir}/INERMEDIATE-FILES_FUTURIANDGE-NF/pipeline_dag_${trace_timestamp}.html"
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
